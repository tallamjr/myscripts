#!/bin/bash
#############################################

    # SET ENVIRONMENT VARIABLES

#############################################
set -e

export CONDA_BUILD_SYSROOT=/opt/MacOSX10.9.sdk
export ARROW_REPO=$HOME/github/arrow
# export ARROW_BUILD_DIR=$ARROW_REPO/cpp/build
# export ARROW_PYTHON_DIR=$ARROW_REPO/python
export CMAKE_OSX_SYSROOT=/opt/MacOSX10.9.sdk
# hide nodejs experimental-feature warnings
export NODE_NO_WARNINGS=1
# export MINICONDA=$HOME/miniconda
export CONDA_PKGS_DIRS=$HOME/.conda_packages
export CONDA_BINUTILS_VERSION=2.31

export ARROW_LLVM_VERSION=7.0
export CONDA_LLVM_VERSION="7.0.*"

# extract the major version
export ARROW_LLVM_MAJOR_VERSION=$(echo $ARROW_LLVM_VERSION | cut -d. -f1)

export ARROW_CPP_DIR=$ARROW_REPO/cpp
export ARROW_PYTHON_DIR=$ARROW_REPO/python
export ARROW_C_GLIB_DIR=$ARROW_REPO/c_glib
export ARROW_JAVA_DIR=${ARROW_REPO}/java
export ARROW_JS_DIR=${ARROW_REPO}/js
export ARROW_INTEGRATION_DIR=$ARROW_REPO/integration
export ARROW_DEV_DIR=$ARROW_REPO/dev
export ARROW_CROSSBOW_DIR=$ARROW_REPO/dev/tasks
export ARROW_RUBY_DIR=$ARROW_REPO/ruby
export ARROW_GO_DIR=${ARROW_REPO}/go
export ARROW_RUST_DIR=${ARROW_REPO}/rust
export ARROW_R_DIR=${ARROW_REPO}/r

export CPP_BUILD_DIR=$ARROW_REPO/cpp-build

export ARROW_CPP_INSTALL=$ARROW_REPO/cpp-install
export ARROW_CPP_BUILD_DIR=$ARROW_REPO/cpp-build

export DYLD_LIBRARY_PATH=$ARROW_CPP_INSTALL:$ARROW_CPP_BUILD_DIR:$DYLD_LIBRARY_PATH
echo $DYLD_LIBRARY_PATH

export ARROW_C_GLIB_INSTALL_AUTOTOOLS=$ARROW_REPO/c-glib-install-autotools
export ARROW_C_GLIB_INSTALL_MESON=$ARROW_REPO/c-glib-install-meson

export CMAKE_EXPORT_COMPILE_COMMANDS=1

export ARROW_BUILD_TYPE=${ARROW_BUILD_TYPE:=debug}
export ARROW_BUILD_WARNING_LEVEL=${ARROW_BUILD_WARNING_LEVEL:=Production}

# C++ toolchain
export CPP_TOOLCHAIN=$ARROW_REPO/cpp-toolchain

export GOPATH=$ARROW_REPO/gopath

export ARROW_TEST_DATA=$ARROW_REPO/testing/data
export PARQUET_TEST_DATA=$ARROW_REPO/cpp/submodules/parquet-testing/data

export CC=`which clang`
export CXX=`which clang++`
echo $CC
echo $CXX
######################################################
export ARROW_HOME=$ARROW_CPP_INSTALL
export PARQUET_HOME=$ARROW_CPP_INSTALL
export LD_LIBRARY_PATH=$ARROW_HOME/lib:$LD_LIBRARY_PATH
export PYARROW_CXXFLAGS="-Werror"

source $ARROW_REPO/ci/travis_install_osx_sdk.sh

PYARROW_PYTEST_FLAGS=" -r sxX --durations=15 --parquet"

PYTHON_VERSION=3.7
CONDA_ENV_DIR=$ARROW_REPO/pyarrow-test-$PYTHON_VERSION

conda create -n pyarrow-dev \
      --file $ARROW_REPO/ci/conda_env_cpp.yml \
      --file $ARROW_REPO/ci/conda_env_unix.yml \
      --file $ARROW_REPO/ci/conda_env_python.yml \
      ${CONDA_FILES} \
      nomkl \
      pip \
      numpy=1.14 \
      'libgfortran<4' \
      python=${PYTHON_VERSION} \
      compilers \
      ${CONDA_PACKAGES}

# We should use zlib in the target Python directory to avoid loading
# the wrong libpython on macOS at run-time. Another zlib might sit in a
# directory with a different libpython3.6m.dylib, and that libpython3.6m.dylib
# may not have NumPy (which is required for python-test)
export ZLIB_HOME=$CONDA_ENV_DIR

CONDA_FILES=""
CONDA_PACKAGES=""

python --version
which python

# Clear out prior build files
rm -rf $ARROW_CPP_BUILD_DIR
mkdir -p $ARROW_CPP_BUILD_DIR
pushd $ARROW_CPP_BUILD_DIR

CMAKE_COMMON_FLAGS="-DARROW_EXTRA_ERROR_CONTEXT=ON"
CMAKE_COMMON_FLAGS="$CMAKE_COMMON_FLAGS -DARROW_VERBOSE_THIRDPARTY_BUILD=ON"
# conda-forge sets the build flags by default to -02, skip this to speed up the build
export CFLAGS=${CFLAGS//-O2}
export CXXFLAGS=${CXXFLAGS//-O2}

cmake -GNinja \
      $CMAKE_COMMON_FLAGS \
      -DARROW_BUILD_TESTS=ON \
      -DARROW_BUILD_UTILITIES=OFF \
      -DARROW_OPTIONAL_INSTALL=ON \
      -DARROW_PARQUET=ON \
      -DARROW_WITH_BZ2=ON \
      -DARROW_WITH_ZLIB=ON \
      -DARROW_WITH_ZSTD=ON \
      -DARROW_WITH_LZ4=ON \
      -DARROW_WITH_SNAPPY=ON \
      -DARROW_WITH_BROTLI=ON \
      -DARROW_PLASMA=ON \
      -DARROW_TENSORFLOW=ON \
      -DARROW_PYTHON=ON \
      -DARROW_ORC=ON \
      -DARROW_INSTALL_NAME_RPATH=OFF \
      -DCONDA_BUILD_SYSROOT=/opt/MacOSX10.9.sdk \
      -DCMAKE_BUILD_TYPE=$ARROW_BUILD_TYPE \
      -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \
      $ARROW_CPP_DIR

ninja $PYTHON_CPP_BUILD_TARGETS
ninja install

export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$ARROW_CPP_INSTALL/lib/pkgconfig

# python-test isn't run by travis_script_cpp.sh, exercise it here
$ARROW_CPP_BUILD_DIR/$ARROW_BUILD_TYPE/arrow-python-test

export PYARROW_BUILD_TYPE=$ARROW_BUILD_TYPE
export PYARROW_WITH_FLIGHT=0
export PYARROW_WITH_GANDIVA=0
export PYARROW_WITH_PARQUET=1
export PYARROW_WITH_PLASMA=1
export PYARROW_WITH_ORC=1

pushd $ARROW_PYTHON_DIR
python setup.py develop
# Basic sanity checks
python -c "import pyarrow.parquet"
python -c "import pyarrow.plasma"
python -c "import pyarrow.orc"
python -c "import pyarrow.fs"

python -c "import pyarrow as pa; print(pa.__version__)"

exitCode=$?
if [ "$exitCode" == 0 ]; then
    pushd $ARROW_PYTHON_DIR
    export PYARROW_WITH_FLIGHT=0
    export PYARROW_WITH_GANDIVA=0
    export PYARROW_WITH_ORC=1
    export PYARROW_WITH_PARQUET=1
    python setup.py build_ext --inplace
    popd
fi

python -m pytest $PYARROW_PYTEST_FLAGS pyarrow/tests

if [ "$1" == "docs" ]; then
    pushd $ARROW_REPO/cpp/apidoc
    doxygen
    popd
    pushd $ARROW_REPO/docs
    # make html
    sphinx-build -q -b html -d _build/doctrees -W --keep-going source _build/html
    popd
fi
